So I was working on deciding the distribution of Spearman correlations
and I wrote the program scorrs.py, which turns out to generate numbers from
oeis.org/A175929
"triangle T(n,v) read by rows"
    There is a graph at"
        https://oeis.org/A175929/graph

    which shows several rows of the triangle, which looks like it might 
    approximate a very bumpy normal curve after maybe n>9.

scorrs.py is way too expensive to actually run by the time we reach n=13, for 
which there are 6E9+ permutations.

So I was hoping that there would be a way to use the triangle to 
generate successive rows.  Tempting this hope is the following maple code:

EXAMPLE         

The triangle starts in row n=1 and column v=0 as follows:

1;
1,1;
1,2,0,2,1;
1,3,1,4,2,2,2,4,1,3,1;
1,4,3,6,7,6,4,10,6,10,6,10,6,10,4,6,7,6,3,4,1;
...

MAPLE   
        with(combinat):
        T:= n-> (p-> seq(coeff(p, x, j), j=ldegree(p)..degree(p)))
                (add(x^add(i*l[i], i=1..n), l=permute(n))):
                seq(T(n), n=1..7);  # Alois P. Heinz, Aug 28 2014 

unfortunately I can't easily read this code, but I bet I can find online 
documentation.   It does look like it generates the sequence row-by-row, though.

According to the manual, there are three statements here.
with(combinat): is the first one.  the colon means "don't print result"
T:= n->(p  ...)))
       (a ... n))): is the second.   It defines T, and doesn't print
seq... ;            is the third.  It prints a result.  it has a comment.

combinat is a package which contains the function permute, and 
with(combinat): 
        qualifies the reference to permute 
    probably 'with' reads in a library and adds symbols to the table.

the rows of the example are apparently generated by
seq(T(n), n=1,7) where apparently the n is local to the expression

and thus the definition of T is the lines:
        T:= n-> (p-> seq(coeff(p, x, j), j=ldegree(p)..degree(p)))
                (add(x^add(i*l[i], i=1..n), l=permute(n))):

Since we see that T takes an argument n, -> must be the lambda operator, as in
python.  The : here evidently separates the definition from its invocation
in seq(T...)
But there are two parenthesized expressions in the body of T.
I think that 
  the first expression is a function in p, which is a polynomial,
    (because coeff, ldegree and degree are functions which take polynomial
    arguments)
  the second expression builds the polynomial, in 'x' from the list of permutations.
        for the permutation (1,2,3) it builds x^(1+4+9)
        for the permutation (2,1,3) it builds x^(2+2+9)
         etc.
     and adds them all together. 


